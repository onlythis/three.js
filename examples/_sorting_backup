<!DOCTYPE html>
<html lang="en">
<head>
	<title>Sortin</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0,
	maximum-scale=1.0">
	<style>
	body {
		color: #cccccc;
		font-family:Monospace;
		font-size:13px;
		text-align:center;
		background-color: #050505;
		margin: 0px;
		overflow: hidden;
	}
	#info {
		position: absolute;
		top: 0px; width: 100%;
		padding: 5px;
	}
	</style>
</head>
<body>
	<div id="info">Sort</div>
	<script src="js/libs/dat.gui.min.js"></script>
	<script src="../build/three.js"></script>
	<script src="js/controls/OrbitControls.js"></script>
	<script src="js/libs/stats.min.js"></script>
	<script>
	'use strict';

	var scene, camera, renderer, controls, sphere_group, line_group, container, stats;
	function init() {
		container = document.createElement( 'div' );
		document.body.appendChild( container );
		scene = new THREE.Scene();
		camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.3, 1000);
		camera.position.z = 30;
		camera.position.y = 0;
		camera.position.x = 0;
		camera.lookAt(scene.position);

		renderer = new THREE.WebGLRenderer();
		renderer.setPixelRatio(window.devicePixelRatio);
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.setClearColor(0x0E2255);
		renderer.shadowMap.enabled = true;
		container.appendChild(renderer.domElement);
		stats = new Stats();
		container.appendChild(stats.dom);

		//click to move screen, zoom in and out
		controls = new THREE.OrbitControls(camera, renderer.domElement);

		const ambientLight = new THREE.AmbientLight();
		scene.add(ambientLight);

		const light = new THREE.DirectionalLight();
		light.position.set(200, 100, 200);
		light.castShadow = true;
		light.shadow.camera.left = -100;
		light.shadow.camera.right = 100;
		light.shadow.camera.top = 100;
		light.shadow.camera.bottom = -100;
		scene.add(light);

		sphere_group = new THREE.Group();
		scene.add(sphere_group);
		line_group = new THREE.Group();
		scene.add(line_group);
		initCircle(sphere_count);
		initGUI();
		document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		document.addEventListener( 'mousedown', onDocumentMouseDown, false );

		document.body.appendChild(renderer.domElement);
		window.addEventListener('resize', onResize);
		console.log(scene);
	}

	function onResize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
	}

	var sphere_size = new THREE.SphereGeometry(.15, 16, 16);
	function drawSphere(x,y,z, hue) {
		var mat = new THREE.MeshPhongMaterial({
			color: new THREE.Color(),
			flatShading: THREE.FlatShading,
			transparent: true,
			opacity: .75
		});
		mat.color.setHSL(hue/360, 1, 0.5);
		const obj = new THREE.Mesh(sphere_size, mat);
		obj.castShadow = true;
		obj.receiveShadow = true;
		obj.position.set(x,y,z);
		//obj.rotateY(rot);
		//scene.children[2].add(obj);
		sphere_group.add(obj);
		return obj;
	}

	// draws line between two spheres. gradient color change from sphere1's color to sphere2's color
	function drawLine(obj1, obj2) {
		var geometry = new THREE.BufferGeometry();
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );
		var positions = [];
		var colors = [];
		positions.push(obj1.position.x, obj1.position.y, 0);
		positions.push(obj2.position.x, obj2.position.y, 0);
		colors.push(obj1.material.color.r, obj1.material.color.g, obj1.material.color.b);
		colors.push(obj2.material.color.r, obj2.material.color.g, obj2.material.color.b);
		geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );
		geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );
		geometry.computeBoundingSphere();
		var line = new THREE.Line( geometry, material );
		line_group.add(line);
	}

	function precisionRound(number, precision) {
		var factor = Math.pow(10, precision);
		return Math.round(number * factor) / factor;
	}

	// Creates sphere obj's in a circle starting from east.
	var spheres = [];
	var sphere_count = 128;
	var sphere_pos = [];
	function initCircle(count){
		sphere_count = count;
		spheres = [];
		sphere_pos = [];
		for(var x = 0; x < count; x++) {
			var x_pos = Math.cos(x / count * 2 * Math.PI) * 10;
			var y_pos = Math.sin(x / count * 2 * Math.PI) * 10;
			spheres.push( drawSphere( x_pos , y_pos , 0, x * 360 / count));
			sphere_pos.push([]);
			sphere_pos[x].push(precisionRound(x_pos, 5) , precisionRound(y_pos, 5));
		}
	}

	function hideCircle() {
		for(var x = 0; x < sphere_group.children.length; x++) {
			sphere_group.children[x].visible = !sphere_group.children[x].visible;
		}
	}

	var effectController = {
		reset: resetCircle,
		hideSpheres: hideCircle,
		stop: stopAnim,
		checkSorted: sortCheck,
		selectionShuffle: selectionShuffle,
		shuffleSize: 5,
		shuffleTimeInterval: .02,
		velocity: 150,
		sphereCount: 128,
		selectionSort : selectionSort
	};
	function resetCircle(){
		scene.remove(sphere_group);
		sphere_group = new THREE.Group();
		scene.add( sphere_group );
		scene.remove(line_group);
		line_group = new THREE.Group();
		scene.add( line_group );
		initCircle(sphere_count);
	}
	function initGUI() {
		var gui = new dat.GUI();
		gui.add( effectController, "reset" );
		gui.add( effectController, "hideSpheres" );
		gui.add( effectController, "stop" );
		gui.add( effectController, "checkSorted");
		gui.add( effectController, "selectionShuffle");
		gui.add( effectController, "shuffleSize", 1, 40, 1 ).onChange( function( value ) { shuffle_size = value; } );
		gui.add( effectController, "shuffleTimeInterval", 0, 1, .02 ).onChange( function( value ) { shuffle_time_interval = value; } );
		gui.add( effectController, "velocity", 1, 300, 1 ).onChange( function( value ) { velocity = value; } );
		gui.add( effectController, "sphereCount", 0, 128, 1 ).onChange( function( value ) {
			scene.remove(sphere_group);
			sphere_group = new THREE.Group();
			scene.add( sphere_group );
			scene.remove(line_group);
			line_group = new THREE.Group();
			scene.add( line_group );
			initCircle(value);
		});
		gui.add( effectController, "selectionSort");
	}

	var mouse = new THREE.Vector2();
	var raycaster = new THREE.Raycaster();
	var intersected;
	function onDocumentMouseMove( event ) {
		event.preventDefault();
		mouse.set( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1 );
		raycaster.setFromCamera( mouse, camera );
		//scene.children[2].children = spheres
		//highlights spheres white while mouse is over them ( change to emissive )
		var intersects = raycaster.intersectObjects( scene.children[2].children );
		//if mouse intersects a sphere
		if ( intersects.length > 0 ) {
			//if mouse is still over same object skip
			if ( intersected != intersects[0].object){
				//if mouse was on an obj and moves to another without becoming null
				if(intersected && intersected != selected){
					intersected.material.emissive.setHex( 0x000000 );
				}
				//where mouse currently is equals intersected and emits almost white color
				intersected = intersects[ 0 ].object;
				intersected.material.emissive.setHex( 0xaaaaaa );
			}

		} else {
			//if mouse just moved off a sphere
			//intersected gets assigned to null because the mouse doesn't intersect any spheres
			if ( intersected && intersected != selected) {
				intersected.material.emissive.setHex( 0x000000 );
			}
			intersected = null;
		}
	}

	var selected;
	function onDocumentMouseDown( event ) {
		event.preventDefault();
		// click two spheres to swap them
		//intersected constantly updates, swap when 2nd sphere has been selected
		if( intersected ) {
			if( selected ) {
				//first clicked is selected
				swap(selected, intersected);
			} else {
				//stays emissive while selected as first sphere to swap
				selected = intersected;
				selected.material.emissive.setHex( 0xaaaaaa );
			}
		}
	}

	var motion_counter = [];
	var swapping_obj = [];
	var velocity = 150;
	var atan1 = [], atan2 = [], radius = [], x_avg = [], y_avg = [];
	var pi = Math.PI;

	// glitches when swapping an obj that is already moving. glitch happens when the swap before finishes moving.
	// looks like they briefly swap positions(only visible sometimes). Works out in the end though.
	// because the same sphere is assigned to two swap functions.

	function swap(obj1, obj2) {
		//find middle point/coordinates of obj1, obj2
		x_avg.push((obj1.position.x + obj2.position.x) / 2);
		y_avg.push((obj1.position.y + obj2.position.y) / 2);

		//unemissive and nullify selected and intersected
		if(selected){
			selected.material.emissive.setHex( 0x000000 );
			selected = null;
		}
		if(intersected){
			intersected.material.emissive.setHex( 0x000000 );
			intersected = null;
		}

		// swapping_obj is public and used in function animate() to move spheres.
		swapping_obj.push([]);
		swapping_obj[swapping_obj.length - 1].push(obj1);
		swapping_obj[swapping_obj.length - 1].push(obj2);

		//finding radians(position on circle created by the two objs and their center) of objs with regards to the avg_pos(middle)
		//swap_obj is avg pos of the pair of swapping objs
		// there has to be a cleaner way to write this. the center of the objs is calculated twice.
		var swap_obj1x, swap_obj1y, swap_obj2x, swap_obj2y;
		swap_obj1x = obj1.position.x - x_avg[x_avg.length - 1];
		swap_obj1y = obj1.position.y - y_avg[y_avg.length - 1];
		swap_obj2x = obj2.position.x - x_avg[x_avg.length - 1];
		swap_obj2y = obj2.position.y - y_avg[y_avg.length - 1];
		// Math.atan2 returns the radians of two coordinates on a plane. (0,0) is center of circle. Takes in y first, x second (y,x)
		// cosine of atan2 gives x coordinate
		atan1.push(Math.atan2(swap_obj1y, swap_obj1x));
		atan2.push(Math.atan2(swap_obj2y, swap_obj2x));
		//distance formula
		radius.push(Math.sqrt(Math.pow(obj1.position.x - obj2.position.x , 2) + Math.pow(obj1.position.y - obj2.position.y , 2)) / 2);
		//counter needed to ensure proper distance and time of rotation
		motion_counter.push(0);
	}

	//how is it able to have same obj in two swaps simultaneously?  1 obj is assigned to mutliple elements in swapping_obj array.

	var shuffle_size = 5;
	var swap_stack = [];
	// calls swap function(eventually) with no sphere being used twice. number of swap calls depends on user input(shuffle_size)
	function selectionShuffle() {
		// selection_sorting = false just so selectionShuffle can be called during sorting(kinda).
		selection_sorting = false;
		if(shuffle_size * 2 > sphere_count) { console.log("shuffle size to large"); return; }
		var elems = [];
		for(var x=0; x<shuffle_size; x++){
			var first_rand = Math.round(Math.random() * (sphere_count - 1));
			var second_rand = Math.round(Math.random() * (sphere_count - 1));
			// don't want to shuffle same sphere twice
			while(elems.indexOf(first_rand) != -1){
				first_rand = Math.round(Math.random() * (sphere_count - 1));
			}
			elems.push(first_rand);
			while(elems.indexOf(second_rand) != -1){
				second_rand = Math.round(Math.random() * (sphere_count - 1));
			}
			elems.push(second_rand);
			swap_stack.push( spheres[first_rand], spheres[second_rand]);
		}
	}

	//insertion shuffle, picks two random spheres, moves last to beginning, slides all spheres inbetween one position counterclockwise
	function insertionShuffle() {
		var first_rand = Math.round(Math.random() * (sphere_count - 1));
		var second_rand = Math.round(Math.random() * (sphere_count - 1));
		// first and second rand will not be the same.
		while(first_rand == second_rand) {
			second_rand = Math.round(Math.random() * (sphere_count - 1));
		}

	}

	// provides output for user
	function sortCheck() {
		var count = 0;
		for(var x = 0; x < spheres.length; x++){
			if(getObjbyIndex(x) == spheres[x]) { count++; }
		}
		console.log("spheres in initial index: " + count);
	}
	// no output because it is called alot.
	function sortCheck2() {
		var count = 0;
		for(var x = 0; x < spheres.length; x++){
			if(getObjbyIndex(x) == spheres[x]) { count++; }
		}
		return sphere_count == count;
	}

	// returns the obj that is currently at index. Red sphere is index 0 and increases counterclockwise.
	function getObjbyIndex(index) {
		for( var x = 0; x < sphere_pos.length; x++) {
			if(precisionRound(spheres[x].position.x, 5) == sphere_pos[index][0] &&
			 	 precisionRound(spheres[x].position.y, 5) == sphere_pos[index][1]) {
				return spheres[x];
			}
		}
	}

	var selection_sorting = false;
	// called once to remove lines, and start selection sorting.
	function selectionSort() {
		selection_sorting = true;
		scene.remove(line_group);
		line_group = new THREE.Group();
		scene.add( line_group );
		selectionSortNext();
	}

	// will continue until spheres are sorted.
	function selectionSortNext() {
		//for loops checks each position moving counterclockwise starting at red sphere.
		for (var x = 0; x < sphere_pos.length; x++) {
			// spheres[x] is the sphere that should be in this position.
			if (getObjbyIndex(x) != spheres[x]) {
				swap_stack.push(getObjbyIndex(x) , spheres[x]);
				// can't swap again until current swap finishes. One sphere can be swapped twice in a row, needs time to swap.
				break;
			}
		}
	}

	var next_time = 0;
	var start_anim;
	var shuffle_time_interval = .02;
	function animate() {
		// swaps spheres at set time intervals
		if (swap_stack.length > 0) {
			var time = Date.now() * 0.001;
			while(time >= next_time && swap_stack.length > 0) {
				swap(swap_stack.shift(), swap_stack.shift());
				next_time = time + shuffle_time_interval;
			}
		}

		// for each obj currently moving. turn this into function.
		for(var x = 0; x < swapping_obj.length; x++) {
			motion_counter[x] += .001;
			circular_swap_done = circularSwap( swapping_obj[x], atan1[x], atan2[x], radius[x], x_avg[x], y_avg[x], motion_counter[x] );
			if( circular_swap_done ) {
				//shift() - removes the first element in an array
				swapping_obj.shift(); motion_counter.shift(); atan1.shift(); atan2.shift(); radius.shift(); x_avg.shift(); y_avg.shift();
				//if two swapping_obj's reach pi at same time, shift() will cause skipping. so need x--
				//why doesn't this cause index out of bounds? for loop condition(x < swapping_obj.length) re-evaluates every loop.
				x--;
				//if selection sort was called and it is still not completely sorted, selectionsortnext.
				if(selection_sorting && !sortCheck2()) { selectionSortNext(); }
				else { selection_sorting = false;}
			}
		}
		start_anim = requestAnimationFrame(animate);
		stats.update();
		renderer.render(scene, camera);
	}

	var circular_swap_done = false;
	function circularSwap( obj, atan1, atan2, radius, x_avg, y_avg, counter){
		//obj starts moving from its current position.
		obj[0].position.x = Math.cos(atan1 + counter * velocity) * radius + x_avg;
		obj[0].position.y = Math.sin(atan1 + counter * velocity) * radius + y_avg;
		obj[1].position.x = Math.cos(atan2 + counter * velocity) * radius + x_avg;
		obj[1].position.y = Math.sin(atan2 + counter * velocity) * radius + y_avg;
		//motion_counter * velocity will equal pi when each obj in a pair has rotated exactly 180 degrees
		// need to set position with atan + pi because otherwise will be inaccurate.
		if( counter * velocity >= pi ) {
			obj[0].position.x = Math.cos(atan1 + pi) * radius + x_avg;
			obj[0].position.y = Math.sin(atan1 + pi) * radius + y_avg;
			obj[1].position.x = Math.cos(atan2 + pi) * radius + x_avg;
			obj[1].position.y = Math.sin(atan2 + pi) * radius + y_avg;
			drawLine(obj[0], obj[1]);
			return true;
		}
		return false;
	}

	function stopAnim() {
		console.log("swapping obj length: " + swapping_obj.length);
		console.log("swap_stack length: " + swap_stack.length);
		console.log("curcularswapdone: " + circular_swap_done);
		cancelAnimationFrame( start_anim );
	}

	init();
	animate();

	/* calculate entropy?
	shuffle in timed intervals
	curve, setdrawrange, line thickness, particles, sprites, put curves in own group,
	add comments, more comments, everything comments
	insertion sort
	*/
	</script>
</body>
</html>
